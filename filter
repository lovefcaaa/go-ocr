#!/usr/bin/env python3

'''
Copyright (c) 2016, Maxim Konakov
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors
   may be used to endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''

from sys import stdin
import re
from functools import reduce
from operator import not_

# raw input with simple substitution
def read_lines(input):
	dash_re = re.compile(r'[—_-]{2,}')
	space_re = re.compile(r'\s+')
	artifacts_re = re.compile(r'\s+[\'’"`,›]$')
	filters = ( lambda x: space_re.sub(' ', x),	\
				lambda x: dash_re.sub('—', x),	\
				lambda x: x.replace('...', '…'),	\
				lambda x: artifacts_re.sub('', x) )
	for s in input:
		s = s.rstrip()
		yield reduce(lambda x,f: f(x), filters, s) if s else ''

# filter page numbers
def filter_page_numbers(input):
	pnum_re = re.compile(r"\d{1,4}[\w\-']*")
	str_stack = []
	tests = ( not_, pnum_re.match, not_ )

	for s in input:
		if tests[len(str_stack)](s):
			str_stack.append(s)
			if len(str_stack) == len(tests):
				str_stack.clear()	# skipped page number
			continue
		if str_stack:
			yield from str_stack
			str_stack.clear()
		yield s

	yield from str_stack

# join words
def ends_with_split_word(s):
	return len(s) > 2 and s[-1] in ('—', '-') and s[-2].isalpha()

def join_words_simple(input):
	curr = ''
	for s in input:
		if s:
			if ends_with_split_word(s):
				curr += s[:-1]
			elif curr:
				yield curr + s
				curr = ''
			else:
				yield s
		else:
			if curr:
				yield curr + '-'
				curr = ''
			yield ''

	if curr:
		yield curr + '-'

def filter_newlines(input):
	flag = False
	for s in input:
		if s:
			flag = ends_with_split_word(s)
			yield s
		elif not flag:
			yield ''

def join_words(input):
	yield from join_words_simple(filter_newlines(input))

# join lines
def join_lines(input):
	save = []
	for s in input:
		if s:
			save.append(s)
			continue
		if save:
			yield ' '.join(save)
			save.clear()
		yield ''

	if save:
		yield ' '.join(save)


# test
for s in join_lines(join_words(filter_page_numbers(read_lines(stdin)))):
	print(s)

